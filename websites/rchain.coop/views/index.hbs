<div class="section" id="headerSection">

    <div class="textWrapper">
        <h1>Reimagining the World, Many Blocks at a Time</h1>
        <p>RChain is a cooperative building a blockchain platform and tools to enable social coordination in robust, secure, and scalable ways.</p>
        <a href="/get-started" class="btn-blue">Get Started</a>
    </div>

    <div class="vidyaWrapper">
        <video width="900" height="500" muted autoplay controls>
            <source src="/assets/homepage/RChainHero_V5.mp4" type="video/mp4">
        </video>
    </div>

    <ul>
        <li><img src="/assets/icon-1@3x.png"><p>Unlock solutions to unprecedented global challenges and local crises affecting society.</p></li>
        <li><img src="/assets/icon-2@3x.png"><p>Realize superior scalability and speed capable of addressing the issues of today.</p></li>
        <li><img src="/assets/icon-3@3x.png"><p>Discover a complete blockchain solution that empowers people to work together holistically.</p></li>
        <li><img src="/assets/icon-4@3x.png"><p>Connect with a thriving community to solve complex, global challenges.</p></li>
    </ul>

</div>



<div class="section" id="rhoSection">

    <div class="divider"></div>
    <h1>The Rho Revolution</h1>
    <h3>A breakthrough concurrent computational system that unshackles the blockchain</h3>

    <div class="flexWrapper something-else">
        <div class="solar-syst">
            <div class="sun"></div>
            <div class="mercury"></div>
            <div class="venus"></div>
            <div class="earth"></div>
            <div class="mars"></div>
            <div class="jupiter"></div>
            <div class="saturn"></div>
            <div class="uranus"></div>
            <div class="neptune"></div>
            <div class="pluto"></div>
            <div class="asteroids-belt"></div>
        </div>
        <div class="textWrapper">
            <h2>A Complete System</h2>
            <p>RChain is pioneering transparent and secure transactions with an ultra-fast, global scale technology platform. <br><p style="margin-top: 10px;">Cooperative governance and a sustainable economic model make RChain a public utility which can be applied to the greatest problems today.</p></p>
        </div>
    </div>

    <div class="flexWrapper">
        <div class="textWrapper centered">
            <h2>Fast and Efficient at Every Scale</h2>
            <p>Intelligent concurrency throughout the network and right-sized validation of every transaction prevents wasted resources. Transactions now happen with low execution costs and greater efficiency.</p>
        </div>
    </div>

    <div class="flexWrapper">
        <div class="imgWrapper">
            <img src="/assets/homepage/3_GIF4_1120x1120.gif">
        </div>
        <div class="textWrapper">
            <h2>Dependable and Secure for All Applications</h2>
            <p>RChain's truly decentralized architecture design does not compromise security to achieve scale. Rholang, RChain's contract programming language, lets developers write for concurrency and formally verify all processes.</p>
        </div>
    </div>

    <div class="flexWrapper">
        <div class="imgWrapper">
            <img src="/assets/homepage/4_GIF2_1220x1360.gif">
        </div>
        <div class="textWrapper">
            <h2>Built, Nurtured, and Governed Cooperatively</h2>
            <p>An inspirational and radically transparent open-source cooperative. RChain's member-driven contributions enrich every part of the system, resulting in unlimited organic growth.</p>
        </div>
    </div>

    <div>
        <a href="/platform" class="btn-blue2">Learn more about RChain and Rholang</a>
    </div>

</div>

<div class="section" id="communitySection">
    <div>
        <h6>Friends & Enthusiasts</h6>
        <h2>Engage with the Community</h2>
        <p>Community is the heart of RChain. Our inclusive cooperative, balancing results and a purpose-driven outlook, is what brings us together to build technology and social tools. Aimed at lifting our world up and effecting real, positive change, we will help each other flourish.</p>
    </div>

    <div class="flexWrapper">
        <div>
            <a href="https://github.com/rchain/" target="_blank"><img src="/assets/github@3x.png"></a>
        </div>
        <div>
            <a href="https://twitter.com/rchain_coop" target="_blank"><img src="/assets/twitter@3x.png"></a>
        </div>
        <div>
            <a href="https://www.youtube.com/channel/UCSS3jCffMiz574_q64Ukj_w" target="_blank"><img src="/assets/youtube@3x.png"></a>
        </div>
        <div>
            <a href="https://discord.gg/fvY8qhx" target="_blank"><img src="/assets/discord@3x.png"></a>
        </div>
    </div>

</div>

<div class="section" id="getStartedSection">
    <div>
        <h2>Ready to Effect Change?</h2>
    </div>
    <div>
        <a href="/get-started" class="btn-blue">Get Started</a>
    </div>
</div>


<script src="/js/three.js"></script>
<script src="/js/projector.js"></script>
<script src="/js/canvasrender.js"></script>
<script src="js/stats.min.js"></script>

<div id="container"></div>

<script>
    var Bird = function () {
        var scope = this;
        THREE.Geometry.call( this );
        v(   5,   0,   0 );
        v( - 5, - 2,   1 );
        v( - 5,   0,   0 );
        v( - 5, - 2, - 1 );
        v(   0,   2, - 6 );
        v(   0,   2,   6 );
        v(   2,   0,   0 );
        v( - 3,   0,   0 );
        f3( 0, 2, 1 );
        f3( 4, 7, 6 );
        f3( 5, 6, 7 );
        this.computeFaceNormals();
        function v( x, y, z ) {
            scope.vertices.push( new THREE.Vector3( x, y, z ) );
        }
        function f3( a, b, c ) {
            scope.faces.push( new THREE.Face3( a, b, c ) );
        }
    };

    Bird.prototype = Object.create( THREE.Geometry.prototype );
    Bird.prototype.constructor = Bird;
    // Based on https://www.openprocessing.org/sketch/6910
    var Boid = function () {
        var vector = new THREE.Vector3(),
                _acceleration, _width = 500, _height = 500, _depth = 200, _goal, _neighborhoodRadius = 100,
                _maxSpeed = 4, _maxSteerForce = 0.1, _avoidWalls = false;
        this.position = new THREE.Vector3();
        this.velocity = new THREE.Vector3();
        _acceleration = new THREE.Vector3();
        this.setGoal = function ( target ) {
            _goal = target;
        };
        this.setAvoidWalls = function ( value ) {
            _avoidWalls = value;
        };
        this.setWorldSize = function ( width, height, depth ) {
            _width = width;
            _height = height;
            _depth = depth;
        };
        this.run = function ( boids ) {
            if ( _avoidWalls ) {
                vector.set( - _width, this.position.y, this.position.z );
                vector = this.avoid( vector );
                vector.multiplyScalar( 5 );
                _acceleration.add( vector );
                vector.set( _width, this.position.y, this.position.z );
                vector = this.avoid( vector );
                vector.multiplyScalar( 5 );
                _acceleration.add( vector );
                vector.set( this.position.x, - _height, this.position.z );
                vector = this.avoid( vector );
                vector.multiplyScalar( 5 );
                _acceleration.add( vector );
                vector.set( this.position.x, _height, this.position.z );
                vector = this.avoid( vector );
                vector.multiplyScalar( 5 );
                _acceleration.add( vector );
                vector.set( this.position.x, this.position.y, - _depth );
                vector = this.avoid( vector );
                vector.multiplyScalar( 5 );
                _acceleration.add( vector );
                vector.set( this.position.x, this.position.y, _depth );
                vector = this.avoid( vector );
                vector.multiplyScalar( 5 );
                _acceleration.add( vector );
            }/* else {
						this.checkBounds();
					}
					*/
            if ( Math.random() > 0.5 ) {
                this.flock( boids );
            }
            this.move();
        };
        this.flock = function ( boids ) {
            if ( _goal ) {
                _acceleration.add( this.reach( _goal, 0.005 ) );
            }
            _acceleration.add( this.alignment( boids ) );
            _acceleration.add( this.cohesion( boids ) );
            _acceleration.add( this.separation( boids ) );
        };
        this.move = function () {
            this.velocity.add( _acceleration );
            var l = this.velocity.length();
            if ( l > _maxSpeed ) {
                this.velocity.divideScalar( l / _maxSpeed );
            }
            this.position.add( this.velocity );
            _acceleration.set( 0, 0, 0 );
        };
        this.checkBounds = function () {
            if ( this.position.x >   _width ) this.position.x = - _width;
            if ( this.position.x < - _width ) this.position.x =   _width;
            if ( this.position.y >   _height ) this.position.y = - _height;
            if ( this.position.y < - _height ) this.position.y =  _height;
            if ( this.position.z >  _depth ) this.position.z = - _depth;
            if ( this.position.z < - _depth ) this.position.z =  _depth;
        };
        //
        this.avoid = function ( target ) {
            var steer = new THREE.Vector3();
            steer.copy( this.position );
            steer.sub( target );
            steer.multiplyScalar( 1 / this.position.distanceToSquared( target ) );
            return steer;
        };
        this.repulse = function ( target ) {
            var distance = this.position.distanceTo( target );
            if ( distance < 150 ) {
                var steer = new THREE.Vector3();
                steer.subVectors( this.position, target );
                steer.multiplyScalar( 0.5 / distance );
                _acceleration.add( steer );
            }
        };
        this.reach = function ( target, amount ) {
            var steer = new THREE.Vector3();
            steer.subVectors( target, this.position );
            steer.multiplyScalar( amount );
            return steer;
        };
        this.alignment = function ( boids ) {
            var count = 0;
            var velSum = new THREE.Vector3();
            for ( var i = 0, il = boids.length; i < il; i++ ) {
                if ( Math.random() > 0.6 ) continue;
                var boid = boids[ i ];
                var distance = boid.position.distanceTo( this.position );
                if ( distance > 0 && distance <= _neighborhoodRadius ) {
                    velSum.add( boid.velocity );
                    count++;
                }
            }
            if ( count > 0 ) {
                velSum.divideScalar( count );
                var l = velSum.length();
                if ( l > _maxSteerForce ) {
                    velSum.divideScalar( l / _maxSteerForce );
                }
            }
            return velSum;
        };
        this.cohesion = function ( boids ) {
            var count = 0;
            var posSum = new THREE.Vector3();
            var steer = new THREE.Vector3();
            for ( var i = 0, il = boids.length; i < il; i ++ ) {
                if ( Math.random() > 0.6 ) continue;
                var boid = boids[ i ];
                var distance = boid.position.distanceTo( this.position );
                if ( distance > 0 && distance <= _neighborhoodRadius ) {
                    posSum.add( boid.position );
                    count++;
                }
            }
            if ( count > 0 ) {
                posSum.divideScalar( count );
            }
            steer.subVectors( posSum, this.position );
            var l = steer.length();
            if ( l > _maxSteerForce ) {
                steer.divideScalar( l / _maxSteerForce );
            }
            return steer;
        };
        this.separation = function ( boids ) {
            var posSum = new THREE.Vector3();
            var repulse = new THREE.Vector3();
            for ( var i = 0, il = boids.length; i < il; i ++ ) {
                if ( Math.random() > 0.6 ) continue;
                var boid = boids[ i ];
                var distance = boid.position.distanceTo( this.position );
                if ( distance > 0 && distance <= _neighborhoodRadius ) {
                    repulse.subVectors( this.position, boid.position );
                    repulse.normalize();
                    repulse.divideScalar( distance );
                    posSum.add( repulse );
                }
            }
            return posSum;
        };
    };
    var SCREEN_WIDTH = window.innerWidth,
            SCREEN_HEIGHT = window.innerHeight,
            SCREEN_WIDTH_HALF = SCREEN_WIDTH  / 2,
            SCREEN_HEIGHT_HALF = SCREEN_HEIGHT / 2;
    var camera, scene, renderer,
            birds, bird;
    var boid, boids;
    var stats;
    init();
    animate();
    function init() {
        camera = new THREE.PerspectiveCamera( 75, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 10000 );
        camera.position.z = 450;
        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0x000000, 0);
        birds = [];
        boids = [];

        for ( var i = 0; i < 200; i ++ ) {
            boid = boids[ i ] = new Boid();
            boid.position.x = Math.random() * 400 - 200;
            boid.position.y = Math.random() * 400 - 200;
            boid.position.z = Math.random() * 400 - 200;
            boid.velocity.x = Math.random() * 2 - 1;
            boid.velocity.y = Math.random() * 2 - 1;
            boid.velocity.z = Math.random() * 2 - 1;
            boid.setAvoidWalls( true );
            boid.setWorldSize( 500, 500, 400 );
            bird = birds[ i ] = new THREE.Mesh( new Bird(), new THREE.MeshBasicMaterial( { color:Math.random() * 0xffffff, side: THREE.DoubleSide } ) );
            bird.phase = Math.floor( Math.random() * 62.83 );
            scene.add( bird );
        }
        renderer = new THREE.CanvasRenderer();
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
        document.addEventListener( 'mousemove', onDocumentMouseMove, false );
        document.body.appendChild( renderer.domElement );
        stats = new Stats();
        document.getElementById( 'container' ).appendChild(stats.dom);
        //
        window.addEventListener( 'resize', onWindowResize, false );
    }
    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
    }
    function onDocumentMouseMove( event ) {
        var vector = new THREE.Vector3( event.clientX - SCREEN_WIDTH_HALF, - event.clientY + SCREEN_HEIGHT_HALF, 0 );
        for ( var i = 0, il = boids.length; i < il; i++ ) {
            boid = boids[ i ];
            vector.z = boid.position.z;
            boid.repulse( vector );
        }
    }
    //
    function animate() {
        requestAnimationFrame( animate );
        stats.begin();
        render();
        stats.end();
    }
    function render() {
        for ( var i = 0, il = birds.length; i < il; i++ ) {
            boid = boids[ i ];
            boid.run( boids );
            bird = birds[ i ];
            bird.position.copy( boids[ i ].position );
            var color = bird.material.color;
            color.r = color.g = color.b = ( 500 - bird.position.z ) / 1000;
            bird.rotation.y = Math.atan2( - boid.velocity.z, boid.velocity.x );
            bird.rotation.z = Math.asin( boid.velocity.y / boid.velocity.length() );
            bird.phase = ( bird.phase + ( Math.max( 0, bird.rotation.z ) + 0.1 )  ) % 62.83;
            bird.geometry.vertices[ 5 ].y = bird.geometry.vertices[ 4 ].y = Math.sin( bird.phase ) * 5;
        }
        renderer.render( scene, camera );
    }
</script>

<script>
    var SEPARATION = 100, AMOUNTX = 50, AMOUNTY = 50;
    var container, stats;
    var camera, scene, renderer;
    var particles, particle, count = 0;
    var mouseX = 0, mouseY = 0;
    var windowHalfX = window.innerWidth / 2;
    var windowHalfY = window.innerHeight / 2;
    init();
    animate();
    function init() {
        container = document.createElement( 'div' );
        document.body.appendChild( container );
        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
        camera.position.z = 1000;
        scene = new THREE.Scene();
        particles = new Array();
        var PI2 = Math.PI * 2;
        var material = new THREE.SpriteCanvasMaterial( {
            color: 0xAB0533,
            program: function ( context ) {
                context.beginPath();
                context.arc( 0, 0, 0.5, 0, PI2, true );
                context.fill();
            }
        } );
        var i = 0;
        for ( var ix = 0; ix < AMOUNTX; ix ++ ) {
            for ( var iy = 0; iy < AMOUNTY; iy ++ ) {
                particle = particles[ i ++ ] = new THREE.Sprite( material );
                particle.position.x = ix * SEPARATION - ( ( AMOUNTX * SEPARATION ) / 2 );
                particle.position.z = iy * SEPARATION - ( ( AMOUNTY * SEPARATION ) / 2 );
                scene.add( particle );
            }
        }
        renderer = new THREE.CanvasRenderer();
        scene.background = new THREE.Color( 0xAB0533, 1);
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        container.appendChild( renderer.domElement );
        stats = new Stats();
        container.appendChild( stats.dom );
        document.addEventListener( 'mousemove', onDocumentMouseMove, false );
        document.addEventListener( 'touchstart', onDocumentTouchStart, false );
        document.addEventListener( 'touchmove', onDocumentTouchMove, false );
        //
        window.addEventListener( 'resize', onWindowResize, false );
    }
    function onWindowResize() {
        windowHalfX = window.innerWidth / 2;
        windowHalfY = window.innerHeight / 2;
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
    }
    //
    function onDocumentMouseMove( event ) {
        mouseX = event.clientX - windowHalfX;
        mouseY = event.clientY - windowHalfY;
    }
    function onDocumentTouchStart( event ) {
        if ( event.touches.length === 1 ) {
            event.preventDefault();
            mouseX = event.touches[ 0 ].pageX - windowHalfX;
            mouseY = event.touches[ 0 ].pageY - windowHalfY;
        }
    }
    function onDocumentTouchMove( event ) {
        if ( event.touches.length === 1 ) {
            event.preventDefault();
            mouseX = event.touches[ 0 ].pageX - windowHalfX;
            mouseY = event.touches[ 0 ].pageY - windowHalfY;
        }
    }
    //
    function animate() {
        requestAnimationFrame( animate );
        render();
        stats.update();
    }
    function render() {
        camera.position.x += ( mouseX - camera.position.x ) * .05;
        camera.position.y += ( - mouseY - camera.position.y ) * .05;
        camera.lookAt( scene.position );
        var i = 0;
        for ( var ix = 0; ix < AMOUNTX; ix ++ ) {
            for ( var iy = 0; iy < AMOUNTY; iy ++ ) {
                particle = particles[ i++ ];
                particle.position.y = ( Math.sin( ( ix + count ) * 0.3 ) * 50 ) +
                        ( Math.sin( ( iy + count ) * 0.5 ) * 50 );
                particle.scale.x = particle.scale.y = ( Math.sin( ( ix + count ) * 0.3 ) + 1 ) * 4 +
                        ( Math.sin( ( iy + count ) * 0.5 ) + 1 ) * 4;
            }
        }
        renderer.render( scene, camera );
        count += 0.1;
    }
</script>